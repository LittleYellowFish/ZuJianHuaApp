apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def config = rootProject.ext

android {
    compileSdkVersion config.android.compileSdkVersion
    defaultConfig {
        applicationId config.android.applicationId
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode config.android.versionCode
        versionName config.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true // dex突破65535方法数的限制
        ndk { abiFilters "armeabi", "armeabi-v7a", "arm64-v8a" }// 设置支持的SO库的架构

        //排除掉中间生成的DEPENDENCIES.txt文件
        packagingOptions {
            exclude 'META-INF/rxjava.properties'
        }

        //阿里ARouter必须加的配置，每个需要跳转的module都需要
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false  //true: build release 版本 时 开启lint 检测
        abortOnError false //lint 遇到 error 时继续 构建
    }
    signingConfigs {
        debug {
            storeFile file(DEBUG_STORE_FILE)
            storePassword DEBUG_STORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        debug {
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
    }
    flavorDimensions "kdjz"//多渠道维度，必须设置
    //设置多渠道
    productFlavors {
        dev {}
        qeeniao {}
        xiaomi {}
        baidu {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
    // 重命名apk并打包
    applicationVariants.all { variant ->
        if ("release".equalsIgnoreCase(variant.buildType.name)) {
            variant.mergeAssets.doLast {
                delete "${buildDir}/intermediates/assets/${variant.productFlavors[0].name}/release/themeDebug"
            }
        }

        variant.outputs.all {
            outputFileName = "${variant.name}-${variant.versionName}.apk"
            outputFileName
        }
    }

}
//统一基础类库版本号
configurations.all {
    resolutionStrategy.force config.dependencies["support-annotations"]
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    if (isLibrary.toBoolean()) {
        compile project(':search')
    } else {
        compile project(':basemodule')
    }
    //每个组件必须引入
    annotationProcessor config.dependencies["activityrouter-compiler"]
    //阿里的ARouter
    annotationProcessor config.dependencies["arouter-compiler"]
}
